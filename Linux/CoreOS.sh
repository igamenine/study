# 本文参考https://zhuanlan.zhihu.com/p/60675288

# CoreOS是什么？
简单的说，它是一种基于ChromeOS再定制的轻量级Linux发行版本。
作为一个操作系统，CoreOS采用了高度精简的系统内核及外围定制，将许多原本需要复杂人工操作或者第三方软件支持的功能在操作系统级别进行了实现，同时剔除了其他对于服务器系统非核心的软件，比如GUI和包管理器，也因此极难为系统本身安装应用程序，但是CoreOS设计本身也不推荐直接安装应用程序，CoreOS推荐使用docker部署的方式以容器的方式实现应用程序功能。
# CoreOS优点有哪些？
1、操作系统、应用程序及运行环境之间的耦合度大大降低。
相对于传统的部署方式而言，在CoreOS集群中部署应用程序更加灵活便捷，应用程序运行环境之间的干扰更少，而且操作系统自身的维护也更加容易。
2、双系统分区设计，使系统升级变得便捷无感。
主动分区负责系统运行，被动分区负责系统升级。一旦新版本的操作系统被发布，一个完整的系统文件将被下载至被动分区，并在系统下一次重启时从新版本分区启动，原来的被动分区将切换为主动分区，而之前的主动分区则被切换为被动分区，两个分区扮演的角色将相互对调。同时在系统运行期间系统分区被设置成只读状态，这样也确保了CoreOS的安全性。CoreOS的升级过程在默认条件下将自动完成，并且通过cgroup对升级过程中使用到的网络和磁盘资源进行限制，将系统升级所带来的影响降至最低。
# 关于CoreOS系统？
　　一直以来，服务器操作系统的升级都是运维人员感到棘手的事情。目前市面上的各种服务器操作系统普遍存在版本壁垒，无法保证安全的系统升级和回滚，这使得许多服务器不得不长时间运行在已经过时的内核和系统组件上，然后手工安装紧急的安全补丁或者索性完全不在意系统的安全问题。CoreOS系统并不是第一个尝试解决这种现状的服务器系统，但它却是被最先设计出的能够安全可靠地用于生产环境中系统持续升级解决方案的操作系统。
　　出于这样的初衷，CoreOS采用了基于双系统分区、容器技术和集群架构的设计思路，克服了由于用户修改系统内容、用户服务对系统组件依赖，以及系统重启时服务中断等种种导致升级过程不可靠的因素，最终以一种轻量级、平台定制化的操作系统呈现出来。它尽可能地适应各种不同的基础设施环境，使得系统具备十分便捷的集群组建能力，并鼓励用户通过容器技术隔离服务运行环境。
　　熟悉CoreOS系统的操作，除了理解它的只读系统分区和双系统分区等特殊性，更多的要求还在于熟悉CoreOS内置的容器和集群工具，例如Docker、Rkt、Systemd、Fleet、Etcd、Locksmith，以及与Confd、Flannel和Kubernetes等非内置服务的集成使用。