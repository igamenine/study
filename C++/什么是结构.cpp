// 在C++中，结构体（struct）是一种用户自定义的数据类型，它可以将多个不同类型的变量组合成一个整体，从而方便对这些变量进行管理和操作。结构体允许我们定义一组相关联的变量，并为其提供一个语义上的名称，以使程序更加易于理解和维护。

// 结构体由多个成员变量组成，每个成员变量可以是任意合法的数据类型，包括内置数据类型、指针、数组、其他结构体等。成员变量可以在结构体内部声明，也可以在外部声明和定义。

// 以下是一个简单的结构体定义的例子：

// ```c++
#include <iostream>

struct Person {
  std::string name;
  int age;
  double height;
};

int main() {
  Person p1 = {"Alice", 20, 1.70};
  std::cout << p1.name << " is " << p1.age << " years old and " << p1.height << " meters tall." << std::endl;
  return 0;
}
// ```

// 在这个例子中，我们定义了一个名为Person的结构体，它包含三个成员变量name、age和height，分别表示人的姓名、年龄和身高。然后，在main函数中，我们创建了一个Person类型的对象p1，并使用大括号{}来初始化其各个成员变量的值。最后，我们使用`std::cout`流对象将p1的信息输出到控制台。

// 需要注意的是，结构体与类（class）类似，都是C++中的复合数据类型，但它们有一些重要的区别，例如访问控制符、默认的成员变量访问权限等。通常情况下，如果我们需要在代码中定义复杂的数据类型并对其进行封装，应该优先考虑使用类而不是结构体。